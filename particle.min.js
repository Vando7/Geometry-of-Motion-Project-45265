//////////////////////////////////////////////
/// Имена: Иван Михайлов
/// ФН: 45265
/// Специалност: Информатика
/// Прочел съм критерии 44
///
/// Използване: particle jeff([Spawnpoint vector],[Velocity Vector], duration, repeat)
///		-| [Spawnpoint Vector] - Това е началната точка на частицата. Представлява вектор с три параметъра: [x, y, z]
///		-| [Velocity Vector] - Вектор на скоростта на частицата.
///		-| duration - Този параметър определя колко дълго да 'живее' частицата в секунди. След това просто изчезва.
///		-| repeat - А с този казваме дали искаме поведението на частицата да се повтаря след като 'умре'.

class particle{
	VelocityAngle(){};

	constructor([x,y,z],[x0,y0,z0],duration,repeat){
		this.birthTime = new Date();
		this.age = new Date();

		// Gravity.
		this.g = 1;
		this.isDone = false
		
		// Приемаме, че е в секунди.
		this.duration = duration;
		this.repeat = repeat;
		
		// Запазване на началната вертикална скорост.
		this.z0=z0;

		this.velocity   = [x0,y0,z0];
		this.spawnPoint = [x,y,z];

		this.XYLenght = sqrt((x0*x0) + (y0*y0));

		this.element = box([x,y,z],0.3,0.3,2);
		this.element.material = Mecho.RED;
		
		// Определяне на ъгъла накъдето гледа кубът.
		var xSign = x0>=0? 1 : -1;
		var ySign = y0>=0? 1 : -1;
		
		this.multiplier=1;
		if(xSign > 0 && ySign > 0 ) {this.multiplier=1;}
		if(xSign < 0 && ySign > 0 ) {this.multiplier=2;}
		if(xSign < 0 && ySign < 0 ) {this.multiplier=3;}
		if(xSign > 0 && ySign < 0 ) {this.multiplier=4;}
		var angle = Math.atan(y0/x0)*(180/Math.PI);
		
		// Определяне на ъглите според квадрантите.
		if(this.multiplier == 2 || this.multiplier == 3){angle+=90;}
		if(this.multiplier == 4 || this.multiplier == 1){angle+=270;}
	
		this.element.rotH = -angle;
	};

	// Тази функция казва колко е стара частицата.
	// Делим с 1000 за да получим резултата в секунди.
	ParticleAge() {
		return (this.age - this.birthTime)/1000;
	};


	VerticalVelocity(){
		return this.z0 - (this.ParticleAge() * this.g);
	};


	animate(){
		if(this.isDone == false){
			this.element.center[0]+=this.velocity[0];
			this.element.center[1]+=this.velocity[1];
			this.element.center[2]+=this.velocity[2];


			this.age = new Date();
			this.velocity[2] = this.VerticalVelocity();
			
			// Завъртане на елемента според големината на Z във вектора за движението.
			if(this.velocity[2]>0){
				this.element.rotT = 
					Math.atan(this.XYLenght/this.velocity[2])*(180/Math.PI);
			}
			else if(this.velocity[2]<0){
				this.element.rotT = 
					180 + Math.atan(this.XYLenght/this.velocity[2])*(180/Math.PI);
			}

			if( this.ParticleAge() >= this.duration){	
				if(this.repeat == false){
					this.isDone = true;
					this.element.visible = false;
				}
				else{
					this.element.center[0] = this.spawnPoint[0];
					this.element.center[1] = this.spawnPoint[1];
					this.element.center[2] = this.spawnPoint[2];
					this.birthTime = this.age;
					this.velocity[2]=this.z0;
				}
				
				
			}
		}
	};

	isDead(){
		return this.isDone;
	};

	location(){
		return this.element.center;
	};
}
